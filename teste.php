<?php
// test.php - Script para testar e debugar o sistema

error_reporting(E_ALL);
ini_set('display_errors', 1);

require_once 'config.php';
require_once 'Memory.php';

echo "<h1>üîß Teste do Sistema de Mem√≥rias</h1>";

// Teste 1: Conex√£o com banco
echo "<h2>1. Testando Conex√£o com Banco</h2>";
try {
    $pdo = getConnection();
    echo "‚úÖ Conex√£o com banco: <strong>OK</strong><br>";
    
    // Testar se a tabela existe
    $stmt = $pdo->query("DESCRIBE memories");
    $columns = $stmt->fetchAll();
    echo "‚úÖ Tabela 'memories' encontrada com " . count($columns) . " colunas<br>";
    
    foreach ($columns as $column) {
        echo "- {$column['Field']} ({$column['Type']})<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erro na conex√£o: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// Teste 2: Classe Memory
echo "<h2>2. Testando Classe Memory</h2>";
try {
    $memory = new Memory();
    echo "‚úÖ Classe Memory: <strong>OK</strong><br>";
    
    // Testar contagem de mem√≥rias
    $count = $memory->count();
    if ($count['success']) {
        echo "‚úÖ Total de mem√≥rias no banco: <strong>{$count['total']}</strong><br>";
    } else {
        echo "‚ùå Erro ao contar mem√≥rias: " . $count['message'] . "<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erro na classe Memory: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// Teste 3: Criar mem√≥ria de teste
echo "<h2>3. Testando Cria√ß√£o de Mem√≥ria</h2>";
try {
    $memory = new Memory();
    
    $testData = [
        'date' => date('d/m/Y H:i'),
        'title' => 'Teste de Mem√≥ria - ' . date('H:i:s'),
        'description' => 'Esta √© uma mem√≥ria de teste criada automaticamente para verificar se o sistema est√° funcionando.',
        'verse' => 'Teste de vers√≠culo b√≠blico',
        'verse_reference' => 'Teste 1:1'
    ];
    
    echo "Dados para teste:<br>";
    echo "<pre>" . print_r($testData, true) . "</pre>";
    
    $result = $memory->create($testData);
    
    if ($result['success']) {
        echo "‚úÖ <strong>Mem√≥ria criada com sucesso!</strong><br>";
        echo "ID da mem√≥ria: " . $result['id'] . "<br>";
        
        // Testar busca da mem√≥ria criada
        $getResult = $memory->getById($result['id']);
        if ($getResult['success']) {
            echo "‚úÖ Mem√≥ria recuperada do banco:<br>";
            echo "<pre>" . print_r($getResult['data'], true) . "</pre>";
        }
        
    } else {
        echo "‚ùå <strong>Erro ao criar mem√≥ria:</strong> " . $result['message'] . "<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erro no teste de cria√ß√£o: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// Teste 4: Listar todas as mem√≥rias
echo "<h2>4. Testando Listagem de Mem√≥rias</h2>";
try {
    $memory = new Memory();
    $result = $memory->getAll();
    
    if ($result['success']) {
        echo "‚úÖ Mem√≥rias recuperadas: <strong>{$result['count']}</strong><br>";
        
        if ($result['count'] > 0) {
            echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
            echo "<tr><th>ID</th><th>Data</th><th>T√≠tulo</th><th>Criado em</th></tr>";
            
            foreach ($result['data'] as $mem) {
                echo "<tr>";
                echo "<td>{$mem['id']}</td>";
                echo "<td>{$mem['date']}</td>";
                echo "<td>" . htmlspecialchars($mem['title']) . "</td>";
                echo "<td>{$mem['created_at']}</td>";
                echo "</tr>";
            }
            
            echo "</table>";
        }
        
    } else {
        echo "‚ùå Erro ao listar mem√≥rias: " . $result['message'] . "<br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erro no teste de listagem: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// Teste 5: Configura√ß√µes
echo "<h2>5. Verificando Configura√ß√µes</h2>";
echo "- DB_HOST: " . DB_HOST . "<br>";
echo "- DB_NAME: " . DB_NAME . "<br>";
echo "- DB_USER: " . DB_USER . "<br>";
echo "- UPLOAD_DIR: " . UPLOAD_DIR . "<br>";
echo "- Diret√≥rio uploads existe: " . (is_dir(UPLOAD_DIR) ? '‚úÖ SIM' : '‚ùå N√ÉO') . "<br>";
echo "- Diret√≥rio uploads √© grav√°vel: " . (is_writable(UPLOAD_DIR) ? '‚úÖ SIM' : '‚ùå N√ÉO') . "<br>";

echo "<hr>";

// Teste 6: Token CSRF
echo "<h2>6. Testando Token CSRF</h2>";
$token = generateCSRFToken();
echo "Token gerado: " . $token . "<br>";
$validation = validateCSRFToken($token);
echo "Valida√ß√£o: " . ($validation ? '‚úÖ OK' : '‚ùå ERRO') . "<br>";

echo "<hr>";

echo "<h2>üéØ Resumo dos Testes</h2>";
echo "<p>Se todos os testes acima mostraram ‚úÖ, seu sistema est√° funcionando corretamente!</p>";
echo "<p>Se algum teste mostrou ‚ùå, verifique:</p>";
echo "<ul>";
echo "<li>Se o MySQL est√° rodando</li>";
echo "<li>Se as credenciais do banco est√£o corretas no config.php</li>";
echo "<li>Se o banco 'catholic_memories' foi criado</li>";
echo "<li>Se a pasta 'uploads' existe e tem permiss√µes de escrita</li>";
echo "</ul>";

echo "<p><a href='view.php'>üîó Ir para View</a> | <a href='edit.php'>üîó Ir para Edit</a></p>";
?>